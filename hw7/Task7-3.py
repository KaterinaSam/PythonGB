# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. 
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число). 
# В классе должны быть реализованы методы перегрузки арифметических операторов: 
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и 
# обычное (не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться округление 
# значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, 
# иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих 
# двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих
# двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. 
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. 
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. 
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. 
# Тогда метод make_order() вернет строку: *****\n*****\n*****.


# Указано в задании "Создается общая клетка" - понимаю это, как возвращение объект Клетка в return 
class Cell:
    def __init__(self, numcells:int):
        """Конструктор"""
        self.__numcells = numcells
    
    # @property
    # def get_numcells(self):           
    #     return self.__numcells
    
    def __str__(self):
        """Вывод в строковом представлении"""
        return f'{self.__numcells}'
        
    def __add__(self, other):
        return Cell( self.__numcells + other.__numcells )
    
    def __sub__(self, other):
        return Cell( self.__numcells - other.__numcells ) if self.__numcells > other.__numcells else 'Вычитание невозможно'
    
    def __mul__(self, other):
        return Cell( self.__numcells * other.__numcells )
    
    def __truediv__(self, other):
        return Cell( round(self.__numcells / other.__numcells) )
    
    def __floordiv__(self, other):
        return Cell( round(self.__numcells // other.__numcells) )
    
    def make_order(self, rowcells:int):
        return self.__numcells//rowcells * ('*' *rowcells +'\n') + self.__numcells%rowcells * '*' +'\n'
    

cell_1 = Cell(15)
cell_2 = Cell(12)

print(f'Сложение клеток: {cell_1 + cell_2}')
print(f'Вычитание клеток: {cell_1 - cell_2}')    
print(f'Умножение клеток: {cell_1 * cell_2}')
print(f'Деление клеток с округлением: {cell_1 / cell_2}')
print(f'Деление клеток целочисленное: {cell_1 // cell_2}')
print(f'Порядок клеток {cell_1}:\n{cell_1.make_order(5)}')
print(f'Порядок клеток {cell_2}:\n{cell_2.make_order(7)}')  

# cell_1.get_numcells можно применять в print(), если не определен метод __str__ ,
# и если не требуется возвращать объект Cell() в return      